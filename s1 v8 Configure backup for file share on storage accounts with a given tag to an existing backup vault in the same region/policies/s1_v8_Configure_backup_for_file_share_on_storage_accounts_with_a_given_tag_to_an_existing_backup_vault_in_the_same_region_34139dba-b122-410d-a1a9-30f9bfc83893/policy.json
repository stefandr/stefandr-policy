{
 "properties": {
  "displayName": "s1 v8 Configure backup for file share on storage accounts with a given tag to an existing backup vault in the same region",
  "policyType": "Custom",
  "mode": "Indexed",
  "description": "Enforce backup for file service on all storage accounts that contain a given tag to a central backup vault. ",
  "metadata": {
   "category": "Backup",
   "createdBy": "e46c6965-0d43-4230-9292-548812d438a3",
   "createdOn": "2022-12-06T01:33:04.1545062Z",
   "updatedBy": "e46c6965-0d43-4230-9292-548812d438a3",
   "updatedOn": "2022-12-15T09:47:50.6023959Z"
  },
  "parameters": {
   "registerStorageAccount": {
    "type": "Boolean",
    "metadata": {
     "displayName": "registerStorageAccount",
     "description": "Set to true if the existing Storage Account has to be registered to the Recovery Services Vault; set to false otherwise."
    },
    "defaultValue": false
   },
   "vaultName": {
    "type": "String",
    "metadata": {
     "displayName": "vault name",
     "description": "write vault name where backup should be registered"
    }
   },
   "policyName": {
    "type": "String",
    "metadata": {
     "displayName": "Backup Policy (of type Azure File share (Azure Storage) from a vault in the location chosen above)",
     "description": "Specify the name of the backup policy to be used for configuring backup for fileshare. The selected Azure Backup policy should be of type Azure FileShare (Azure Storage). This policy needs to be in a vault that is present in the location chosen above. For example - /subscriptions/<SubscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.DataProtection/vaults/<VaultName>/backupPolicies/<BackupPolicyName>. Also, make sure that this Backup vault's managed identity has the Storage Account Backup Contributor role assigned on the storage accounts for which backup is to be configured."
    }
   },
   "inclusionTagName": {
    "type": "String",
    "metadata": {
     "displayName": "Inclusion Tag Name",
     "description": "Name of the tag to use for including storage accounts in the scope of this policy. This should be used along with the Inclusion Tag Value parameter. Learn more at https://aka.ms/AB-BlobBackupAzPolicies"
    }
   },
   "inclusionTagValues": {
    "type": "Array",
    "metadata": {
     "displayName": "Inclusion Tag Values",
     "description": "Value of the tag to use for including storage accounts in the scope of this policy (in case of multiple values, use a comma-separated list). This should be used along with the Inclusion Tag Name parameter. Learn more at https://aka.ms/AB-BlobBackupAzPolicies."
    }
   },
   "existingFileShareName": {
    "type": "String",
    "metadata": {
     "displayName": "existingFileShareName",
     "description": "temporary name of existingFileShareName before we will list it"
    },
    "defaultValue": "NameOfFileShare"
   },
   "backupExists": {
    "type": "String",
    "metadata": {
     "displayName": "backupExists",
     "description": "metadata value if backup exist"
    },
    "defaultValue": "{\"AzureBackupProtected\":\"true\"}"
   },
   "vaultLocation": {
    "type": "String",
    "metadata": {
     "displayName": "vaultLocation",
     "description": "metadata value if backup exist",
     "strongType": "location"
    },
    "defaultValue": "{\"AzureBackupProtected\":\"true\"}"
   },
   "effect": {
    "type": "String",
    "metadata": {
     "displayName": "Effect",
     "description": "Enable or disable the execution of the policy"
    },
    "allowedValues": [
     "DeployIfNotExists",
     "AuditIfNotExists",
     "Disabled"
    ],
    "defaultValue": "DeployIfNotExists"
   }
  },
  "policyRule": {
   "if": {
    "allOf": [
     {
      "field": "type",
      "equals": "Microsoft.Storage/StorageAccounts"
     },
     {
      "field": "[concat('tags[', parameters('inclusionTagName'), ']')]",
      "in": "[parameters('inclusionTagValues')]"
     },
     {
      "field": "kind",
      "equals": "StorageV2"
     },
     {
      "field": "Microsoft.Storage/storageAccounts/sku.name",
      "contains": "Standard"
     },
     {
      "field": "Microsoft.Storage/storageAccounts/isNfsV3Enabled",
      "notEquals": "true"
     },
     {
      "field": "location",
      "equals": "[parameters('vaultLocation')]"
     }
    ]
   },
   "then": {
    "effect": "[parameters('effect')]",
    "details": {
     "type": "Microsoft.Storage/storageAccounts/fileServices",
     "name": "default",
     "existenceCondition": {
      "field": "Microsoft.Storage/storageAccounts/fileServices/shares/metadata",
      "equals": "[parameters('backupExists')]"
     },
     "roleDefinitionIds": [
      "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
      "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b"
     ],
     "deployment": {
      "properties": {
       "mode": "incremental",
       "template": {
        "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
        "contentVersion": "1.0.0.0",
        "parameters": {
         "registerStorageAccount": {
          "type": "bool",
          "defaultValue": false,
          "metadata": {
           "description": "Set to true if the existing Storage Account has to be registered to the Recovery Services Vault; set to false otherwise."
          }
         },
         "vaultName": {
          "type": "string",
          "metadata": {
           "description": "Backup Policy name"
          }
         },
         "existingResourceGroupName": {
          "type": "string",
          "metadata": {
           "description": "existing Resource Group Name"
          }
         },
         "existingFileShareName": {
          "type": "string",
          "metadata": {
           "description": "existing File Share Name"
          }
         },
         "policyName": {
          "type": "string",
          "metadata": {
           "description": "Backup Policy name"
          }
         },
         "storageAccountResourceId": {
          "type": "string",
          "metadata": {
           "description": "ResourceId of the Storage Account"
          }
         },
         "existingStorageAccountName": {
          "type": "string",
          "metadata": {
           "description": "ResourceId of the Storage Account"
          }
         },
         "location": {
          "type": "string",
          "metadata": {
           "description": "Location for all resources"
          }
         }
        },
        "variables": {
         "existingStorageAccountName": "[first(skip(split(parameters('storageAccountResourceId'), '/'), 8))]",
         "existingResourceGroupName": "[parameters('existingResourceGroupName')]",
         "existingFileShareName": "[parameters('existingFileShareName')]",
         "policyName": "[parameters('policyName')]",
         "vaultName": "[parameters('vaultName')]",
         "backupFabric": "Azure",
         "backupManagementType": "AzureStorage"
        },
        "resources": [
         {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2021-04-01",
          "resourceGroup": "[variables('existingResourceGroupName')]",
          "name": "[concat('DeployProtection-',uniqueString(variables('existingStorageAccountName')))]",
          "properties": {
           "mode": "Incremental",
           "template": {
            "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {},
            "resources": [
             {
              "condition": "[parameters('registerStorageAccount')]",
              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers",
              "apiVersion": "2021-12-01",
              "name": "[format('{0}/{1}/storagecontainer;Storage;{2};{3}', parameters('vaultName'), variables('backupFabric'), parameters('existingResourceGroupName'), parameters('existingStorageAccountName'))]",
              "properties": {
               "backupManagementType": "[variables('backupManagementType')]",
               "containerType": "StorageContainer",
               "sourceResourceId": "[resourceId(parameters('existingResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('existingStorageAccountName'))]"
              }
             },
             {
              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
              "apiVersion": "2021-12-01",
              "name": "[format('{0}/{1}/{2}/{3}', split(format('{0}/{1}/storagecontainer;Storage;{2};{3}', parameters('vaultName'), variables('backupFabric'), parameters('existingResourceGroupName'), parameters('existingStorageAccountName')), '/')[0], split(format('{0}/{1}/storagecontainer;Storage;{2};{3}', parameters('vaultName'), variables('backupFabric'), parameters('existingResourceGroupName'), parameters('existingStorageAccountName')), '/')[1], split(format('{0}/{1}/storagecontainer;Storage;{2};{3}', parameters('vaultName'), variables('backupFabric'), parameters('existingResourceGroupName'), parameters('existingStorageAccountName')), '/')[2], format('AzureFileShare;{0}', parameters('existingFileShareName')))]",
              "properties": {
               "protectedItemType": "AzureFileShareProtectedItem",
               "sourceResourceId": "[resourceId(parameters('existingResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('existingStorageAccountName'))]",
               "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('vaultName'), parameters('policyName'))]",
               "isInlineInquiry": true
              },
              "dependsOn": [
               "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers', split(format('{0}/{1}/storagecontainer;Storage;{2};{3}', parameters('vaultName'), variables('backupFabric'), parameters('existingResourceGroupName'), parameters('existingStorageAccountName')), '/')[0], split(format('{0}/{1}/storagecontainer;Storage;{2};{3}', parameters('vaultName'), variables('backupFabric'), parameters('existingResourceGroupName'), parameters('existingStorageAccountName')), '/')[1], split(format('{0}/{1}/storagecontainer;Storage;{2};{3}', parameters('vaultName'), variables('backupFabric'), parameters('existingResourceGroupName'), parameters('existingStorageAccountName')), '/')[2])]"
              ]
             }
            ]
           }
          }
         }
        ]
       },
       "parameters": {
        "existingStorageAccountName": {
         "value": "[first(skip(split(field('id'), '/'), 8))]"
        },
        "existingFileShareName": {
         "value": "[parameters('existingFileShareName')]"
        },
        "storageAccountResourceId": {
         "value": "[field('id')]"
        },
        "existingResourceGroupName": {
         "value": "[resourceGroup().name]"
        },
        "registerStorageAccount": {
         "value": "[parameters('registerStorageAccount')]"
        },
        "vaultName": {
         "value": "[parameters('vaultName')]"
        },
        "policyName": {
         "value": "[parameters('policyName')]"
        },
        "location": {
         "value": "[field('location')]"
        }
       }
      }
     }
    }
   }
  }
 },
 "id": "/subscriptions/53b28e3d-a172-4955-b8e4-a50b1b570109/providers/Microsoft.Authorization/policyDefinitions/34139dba-b122-410d-a1a9-30f9bfc83893",
 "type": "Microsoft.Authorization/policyDefinitions",
 "name": "34139dba-b122-410d-a1a9-30f9bfc83893"
}